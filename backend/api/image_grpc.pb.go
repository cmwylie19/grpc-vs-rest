// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ImageClient is the client API for Image service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ImageClient interface {
	GetImagesStream(ctx context.Context, in *ImageRequest, opts ...grpc.CallOption) (Image_GetImagesStreamClient, error)
	GetImagesUnary(ctx context.Context, in *ImageRequest, opts ...grpc.CallOption) (*ImageResponse, error)
}

type imageClient struct {
	cc grpc.ClientConnInterface
}

func NewImageClient(cc grpc.ClientConnInterface) ImageClient {
	return &imageClient{cc}
}

func (c *imageClient) GetImagesStream(ctx context.Context, in *ImageRequest, opts ...grpc.CallOption) (Image_GetImagesStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Image_ServiceDesc.Streams[0], "/images.Image/GetImagesStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &imageGetImagesStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Image_GetImagesStreamClient interface {
	Recv() (*ImageResponse, error)
	grpc.ClientStream
}

type imageGetImagesStreamClient struct {
	grpc.ClientStream
}

func (x *imageGetImagesStreamClient) Recv() (*ImageResponse, error) {
	m := new(ImageResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *imageClient) GetImagesUnary(ctx context.Context, in *ImageRequest, opts ...grpc.CallOption) (*ImageResponse, error) {
	out := new(ImageResponse)
	err := c.cc.Invoke(ctx, "/images.Image/GetImagesUnary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ImageServer is the server API for Image service.
// All implementations must embed UnimplementedImageServer
// for forward compatibility
type ImageServer interface {
	GetImagesStream(*ImageRequest, Image_GetImagesStreamServer) error
	GetImagesUnary(context.Context, *ImageRequest) (*ImageResponse, error)
	mustEmbedUnimplementedImageServer()
}

// UnimplementedImageServer must be embedded to have forward compatible implementations.
type UnimplementedImageServer struct {
}

func (UnimplementedImageServer) GetImagesStream(*ImageRequest, Image_GetImagesStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetImagesStream not implemented")
}
func (UnimplementedImageServer) GetImagesUnary(context.Context, *ImageRequest) (*ImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetImagesUnary not implemented")
}
func (UnimplementedImageServer) mustEmbedUnimplementedImageServer() {}

// UnsafeImageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ImageServer will
// result in compilation errors.
type UnsafeImageServer interface {
	mustEmbedUnimplementedImageServer()
}

func RegisterImageServer(s grpc.ServiceRegistrar, srv ImageServer) {
	s.RegisterService(&Image_ServiceDesc, srv)
}

func _Image_GetImagesStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ImageRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ImageServer).GetImagesStream(m, &imageGetImagesStreamServer{stream})
}

type Image_GetImagesStreamServer interface {
	Send(*ImageResponse) error
	grpc.ServerStream
}

type imageGetImagesStreamServer struct {
	grpc.ServerStream
}

func (x *imageGetImagesStreamServer) Send(m *ImageResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Image_GetImagesUnary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageServer).GetImagesUnary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/images.Image/GetImagesUnary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageServer).GetImagesUnary(ctx, req.(*ImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Image_ServiceDesc is the grpc.ServiceDesc for Image service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Image_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "images.Image",
	HandlerType: (*ImageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetImagesUnary",
			Handler:    _Image_GetImagesUnary_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetImagesStream",
			Handler:       _Image_GetImagesStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/image.proto",
}
